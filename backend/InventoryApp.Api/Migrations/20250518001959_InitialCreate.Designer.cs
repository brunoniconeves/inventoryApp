// <auto-generated />
using System;
using InventoryApp.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace InventoryApp.Api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250518001959_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("InventoryApp.Api.Models.Inventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CurrentStock")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastUpdated")
                        .IsConcurrencyToken()
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("Inventory");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CurrentStock = 50,
                            LastUpdated = new DateTime(2025, 5, 18, 0, 19, 59, 80, DateTimeKind.Utc).AddTicks(8311),
                            ProductId = 1
                        },
                        new
                        {
                            Id = 2,
                            CurrentStock = 30,
                            LastUpdated = new DateTime(2025, 5, 18, 0, 19, 59, 80, DateTimeKind.Utc).AddTicks(8311),
                            ProductId = 2
                        },
                        new
                        {
                            Id = 3,
                            CurrentStock = 15,
                            LastUpdated = new DateTime(2025, 5, 18, 0, 19, 59, 80, DateTimeKind.Utc).AddTicks(8311),
                            ProductId = 3
                        },
                        new
                        {
                            Id = 4,
                            CurrentStock = 40,
                            LastUpdated = new DateTime(2025, 5, 18, 0, 19, 59, 80, DateTimeKind.Utc).AddTicks(8311),
                            ProductId = 4
                        },
                        new
                        {
                            Id = 5,
                            CurrentStock = 60,
                            LastUpdated = new DateTime(2025, 5, 18, 0, 19, 59, 80, DateTimeKind.Utc).AddTicks(8311),
                            ProductId = 5
                        });
                });

            modelBuilder.Entity("InventoryApp.Api.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .IsConcurrencyToken()
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 5, 18, 0, 19, 59, 80, DateTimeKind.Utc).AddTicks(8311),
                            Description = "High-precision optical sensor with 16000 DPI, ergonomic design, and RGB lighting",
                            Name = "Professional Gaming Mouse",
                            Price = 79.99m,
                            SKU = "MOUSE-PRO-001",
                            UpdatedAt = new DateTime(2025, 5, 18, 0, 19, 59, 80, DateTimeKind.Utc).AddTicks(8311)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 5, 18, 0, 19, 59, 80, DateTimeKind.Utc).AddTicks(8311),
                            Description = "Cherry MX Blue switches, full RGB backlight, aluminum frame",
                            Name = "Mechanical Keyboard",
                            Price = 129.99m,
                            SKU = "KB-MECH-002",
                            UpdatedAt = new DateTime(2025, 5, 18, 0, 19, 59, 80, DateTimeKind.Utc).AddTicks(8311)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 5, 18, 0, 19, 59, 80, DateTimeKind.Utc).AddTicks(8311),
                            Description = "27-inch 4K IPS display, 144Hz refresh rate, 1ms response time",
                            Name = "4K Gaming Monitor",
                            Price = 499.99m,
                            SKU = "MON-4K-003",
                            UpdatedAt = new DateTime(2025, 5, 18, 0, 19, 59, 80, DateTimeKind.Utc).AddTicks(8311)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 5, 18, 0, 19, 59, 80, DateTimeKind.Utc).AddTicks(8311),
                            Description = "7.1 surround sound, noise-canceling mic, memory foam ear cushions",
                            Name = "Gaming Headset",
                            Price = 89.99m,
                            SKU = "HEAD-PRO-004",
                            UpdatedAt = new DateTime(2025, 5, 18, 0, 19, 59, 80, DateTimeKind.Utc).AddTicks(8311)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 5, 18, 0, 19, 59, 80, DateTimeKind.Utc).AddTicks(8311),
                            Description = "Extended size mousepad with RGB border, anti-slip base",
                            Name = "RGB Mousepad XL",
                            Price = 29.99m,
                            SKU = "PAD-RGB-005",
                            UpdatedAt = new DateTime(2025, 5, 18, 0, 19, 59, 80, DateTimeKind.Utc).AddTicks(8311)
                        });
                });

            modelBuilder.Entity("InventoryApp.Api.Models.Inventory", b =>
                {
                    b.HasOne("InventoryApp.Api.Models.Product", "Product")
                        .WithOne("Inventory")
                        .HasForeignKey("InventoryApp.Api.Models.Inventory", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("InventoryApp.Api.Models.Product", b =>
                {
                    b.Navigation("Inventory");
                });
#pragma warning restore 612, 618
        }
    }
}
